from ursinanetworking import *
from ursina import *
from modules.ChatMessage import ChatMessage
from modules.OtherPlayer import OtherPlayer
from modules.Player import Player
from data.RandomPosition import *

# Helper function to parse a string into a Vec3 object


def parse_vec3(vec_str):
    try:
        x, y, z = map(float, vec_str.strip("()").split(","))
        return Vec3(x, y, z)
    except Exception as e:
        print(f"Error parsing Vec3: {e}")
        return Vec3(0, 0, 0)


class MyClient:
    def __init__(self, username, ip, port, start_position):
        self.result = None
        self.ip = ip
        self.port = port
        # self.list_other_players:list[OtherPlayer] = []
        self.list_other_players = {}
        self.player_info = {
            'id': -1,
            'username': username,
        }
        self.start_position = start_position
        self.client = UrsinaNetworkingClient(self.ip, self.port)
        self.easy = EasyUrsinaNetworkingClient(self.client)
        self.chatMessage = ChatMessage(username)
        self.player = Player(position=self.start_position, clientCallback=[self.sendSignalShooting, self.printPosOfOtherPlayer, self.getListOtherPlayers,
                             self.getIdPlayers, self.check_player_shot], ignorePosition=self.start_position, player_info=self.player_info,  client=self)
        self.time_start = time.time()
        Audio('asset/static/sound_effect/getready.ogg').play()

        @self.client.event
        def GetID(content):
            self.player_info['id'] = content
            self.player.position = playerRandomPositions[int(content)]
            self.client.send_message(
                'updatePosition', playerRandomPositions[int(content)])

            # Debug: In ra danh s√°ch replicated variables t·ª´ server
            print("D·ªØ li·ªáu replicated t·ª´ server:",
                  self.easy.replicated_variables)

            # X√≥a danh s√°ch c≈© v√† c·∫≠p nh·∫≠t danh s√°ch m·ªõi
            self.list_other_players.clear()

            for player_id, data in self.easy.replicated_variables.items():
                if int(player_id) != self.player_info['id']:
                    new_player = OtherPlayer(player_id, Vec3(0, 3.5, 0))
                    new_player.setPos(data.content['position'])
                    # ‚úÖ Ch·ªâ th√™m ng∆∞·ªùi ch∆°i kh√°c
                    self.list_other_players[player_id] = new_player

            # Debug: Ki·ªÉm tra danh s√°ch ƒë√£ c·∫≠p nh·∫≠t
            print("Danh s√°ch ng∆∞·ªùi ch∆°i sau khi c·∫≠p nh·∫≠t:",
                  self.list_other_players)

        # h√†m n√†y ch·∫°y ƒë∆∞·ª£c nh∆∞ng l·ªói nh√¢n b·∫£n sau khi reset
        @self.client.event
        def allPlayersData(content):
            print("üîµ C·∫≠p nh·∫≠t l·∫°i danh s√°ch ng∆∞·ªùi ch∆°i t·ª´ server:", content)

            existing_players = set(self.list_other_players.keys())
            print("Danh s√°ch ng∆∞·ªùi ch∆°i hi·ªán t·∫°i:", self.list_other_players)

            for player_id_str, player_data in content.items():
                player_id = int(player_id_str)  # Lu√¥n √©p ki·ªÉu v·ªÅ int

                if player_id == self.player_info['id']:
                    print(f"üö´ B·ªè qua ch√≠nh m√¨nh (ID: {player_id})")
                    continue  # B·ªè qua ch√≠nh m√¨nh

                if player_id in existing_players:
                    print(
                        f"üîÑ C·∫≠p nh·∫≠t l·∫°i v·ªã tr√≠ ng∆∞·ªùi ch∆°i {player_id}: {player_data['position']}")
                    self.list_other_players[player_id].setPos(
                        player_data['position'])
                else:
                    print(
                        f"‚úÖ Th√™m ng∆∞·ªùi ch∆°i m·ªõi {player_id} t·∫°i v·ªã tr√≠ {player_data['position']}")
                    new_player = OtherPlayer(
                        player_id, player_data['position'])
                    self.list_other_players[player_id] = new_player

            # ‚úÖ Y√™u c·∫ßu ƒë·ªìng b·ªô l·∫°i v·ªã tr√≠
            self.client.send_message('requestSyncPositions', {})

        # h√†m n√†y k·∫øt h·ª£p v·ªõi "h√†m n√†y ch·∫°y ƒë∆∞·ª£c nh∆∞ng l·ªói nh√¢n b·∫£n sau khi reset"
        @self.client.event
        def syncPositions(content):
            print("üîÑ ƒê·ªìng b·ªô v·ªã tr√≠ c·ªßa t·∫•t c·∫£ ng∆∞·ªùi ch∆°i t·ª´ server:", content)

            for player_id_str, position in content.items():
                player_id = int(player_id_str)  # √âp ki·ªÉu player_id v·ªÅ int

                if player_id == self.player_info['id']:
                    print(
                        f"‚úÖ C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa ch√≠nh m√¨nh (ID: {player_id}) th√†nh {position}")
                    self.player.position = position  # C·∫≠p nh·∫≠t tr·ª±c ti·∫øp v·ªã tr√≠ c·ªßa nh√¢n v·∫≠t ch√≠nh
                    continue

                if player_id in self.list_other_players:
                    self.list_other_players[player_id].setPos(position)
                    print(
                        f"‚úÖ C·∫≠p nh·∫≠t v·ªã tr√≠ c·ªßa {player_id} th√†nh {position}")
                else:
                    print(
                        f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i {player_id} trong danh s√°ch, nh∆∞ng kh√¥ng t·∫°o m·ªõi v√¨ ƒë√≥ c√≥ th·ªÉ l√† l·ªói!")

        @self.client.event
        def newPlayerLogin(data):
            player_id = data.get('id')
            position = data.get('position', Vec3(0, 3.5, 0))

            # N·∫øu player ID l√† ch√≠nh m√¨nh, kh√¥ng t·∫°o model tƒ©nh
            if player_id == self.player_info['id']:
                print(
                    f"‚ö†Ô∏è B·ªè qua t·∫°o nh√¢n v·∫≠t {player_id} v√¨ ƒë√≥ l√† ch√≠nh m√¨nh!")
                return

            if player_id is None or position is None:
                print(f"‚ùå L·ªói: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! {data}")
                return

            if player_id in self.list_other_players:
                print(f"‚ö†Ô∏è Ng∆∞·ªùi ch∆°i {player_id} ƒë√£ t·ªìn t·∫°i!")
                return

            try:
                new_player = OtherPlayer(player_id, position)
                self.list_other_players[player_id] = new_player
                print(
                    f"‚úÖ ƒê√£ t·∫°o ng∆∞·ªùi ch∆°i m·ªõi: {player_id} t·∫°i v·ªã tr√≠ {position}")
            except Exception as e:
                print(f"‚ùå L·ªói khi t·∫°o OtherPlayer: {e}")

        @self.client.event
        def newMessage(content):
            # print(content)
            self.chatMessage.addNewMessage(
                contentMessage=content['message'], usermes=content['username'])
            pass

        @self.client.event
        def existedClientDisConnected(idPlayerLogout):
            # print('----------ndk log - Existed client disconnect----')
            # print('removed id:', idPlayerLogout)
            self.list_other_players[idPlayerLogout].logout()

        @self.client.event
        def decrease_hp(content):
            print("ƒê√£ nh·∫≠n event decrease_hp v·ªõi content:", content)
            print("Gi√° tr·ªã content nh·∫≠n ƒë∆∞·ª£c:", content)
            print("Gi√° tr·ªã player id c·ªßa t√¥i:", self.player_info['id'])

            # N·∫øu content l√† m·ªôt dictionary, h√£y truy c·∫≠p key ch·ª©a id
            if isinstance(content, dict) and 'id' in content:
                target_id = content['id']
            else:
                target_id = content

            # √âp ki·ªÉu cho ph√π h·ª£p n·∫øu c·∫ßn (v√≠ d·ª•: √©p v·ªÅ int ho·∫∑c str)
            try:
                target_id = int(target_id)
                my_id = int(self.player_info['id'])
            except Exception as e:
                print("L·ªói √©p ki·ªÉu:", e)
                target_id = target_id
                my_id = self.player_info['id']

            if target_id == my_id:
                self.player.healthbar.value -= 20
                print(
                    f"üî• T√¥i b·ªã b·∫Øn! M√°u c√≤n l·∫°i: {self.player.healthbar.value}")
            elif target_id in self.list_other_players:
                new_hp = self.list_other_players[target_id].healthbar.value - 20
                self.list_other_players[target_id].update_health(new_hp)
                print(
                    f"üî• Ng∆∞·ªùi ch∆°i {target_id} b·ªã b·∫Øn! M√°u c√≤n l·∫°i: {new_hp}")

        @self.client.event
        def hearFromOtherClient(content):
            print(content)
            # self.openVoiceChat()

        @self.client.event
        def stopHearFromOtherClient(content):
            print(content)
            self.stopVoiceChat()

        self.endGameMessage = None
        self.allowRestartGame = False

        @self.client.event
        def endGame(content):
            print("Nh·∫≠n event endGame:", content)
            self.allowRestartGame = True
            self.result = content
            if content['id'] == self.player_info['id']:
                self.endGameMessage = Text(
                    text='Victory',
                    style='bold',
                    parent=camera.ui,
                    position=Vec3(-0.595996, 0.136, 0),
                    scale=Vec3(13.9, 10.6, 5),
                    color=color.rgb(231, 245, 32),
                )
                Audio('asset/static/sound_effect/victory.mp3').play()
            else:
                self.endGameMessage = Text(
                    text='Defeat',
                    style='bold',
                    parent=camera.ui,
                    position=Vec3(-0.595996, 0.136, 0),
                    scale=Vec3(13.9, 10.6, 5),
                    color=color.rgb(57, 45, 89),
                )
                Audio('asset/static/sound_effect/defeat.mp3').play()

        @self.easy.event
        def onReplicatedVariableCreated(Content):
            # print('-------ndk log new syn var created-------')
            # print(Content)
            pass

        @self.easy.event
        def onReplicatedVariableRemoved(Content):
            # print('-------ndk log one syn var remove-------')
            # print(Content)
            pass

        @self.client.event
        def updateOtherPlayerPosition(content):
            player_id = content['id']
            position = content['position']

            if player_id in self.list_other_players:
                self.list_other_players[player_id].setPos(position)
                print(f"üîÑ C·∫≠p nh·∫≠t v·ªã tr√≠ ng∆∞·ªùi ch∆°i {player_id}: {position}")
            else:
                print(
                    f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi ch∆°i {player_id} ƒë·ªÉ c·∫≠p nh·∫≠t v·ªã tr√≠!")

        @self.client.event
        def updateOtherPlayerRotation(content):
            player_id = content['id']
            rotation = content['rotation']
            if player_id in self.list_other_players:
                self.list_other_players[player_id].setRot(rotation)
                print(
                    f"üîÑ C·∫≠p nh·∫≠t h∆∞·ªõng c·ªßa ng∆∞·ªùi ch∆°i {player_id}: {rotation}")

        @self.client.event
        def updateOtherPlayerStatus(content):
            player_id = content['id']
            status = content['status']
            if player_id in self.list_other_players:
                other_player = self.list_other_players[player_id]
                # Gi·∫£ s·ª≠ b·∫°n c√≥ c√°c ph∆∞∆°ng th·ª©c running() v√† stand() ƒë·ªÉ chuy·ªÉn ƒë·ªïi animation
                if status == 'running':
                    other_player.running()
                else:
                    other_player.stand()
                print(
                    f"üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ng∆∞·ªùi ch∆°i {player_id}: {status}")

        @self.client.event
        def assignNewID(content):
            self.player_info['id'] = content['id']
            self.player.position = content['position']
            print(
                f"ƒê√£ nh·∫≠n ID m·ªõi: {self.player_info['id']}, v·ªã tr√≠: {self.player.position}")

        @self.client.event
        def reset_game(content):
            print("ƒê√£ nh·∫≠n event reset_game t·ª´ server:", content)
            self.resetGame(content)

            # ‚úÖ Y√™u c·∫ßu danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi ch∆°i t·ª´ server ƒë·ªÉ c·∫≠p nh·∫≠t l·∫°i
            self.client.send_message('requestAllPlayersData', {})

    def resetGame(self, content):
        print("D·ªØ li·ªáu content nh·∫≠n ƒë∆∞·ª£c:", content)
        if not isinstance(content, dict):
            print("‚ö†Ô∏è Content kh√¥ng ph·∫£i dictionary, b·ªè qua:", content)
            return
        if 'id' in content:
            print("‚ÑπÔ∏è Nh·∫≠n d·ªØ li·ªáu endGame thay v√¨ reset_game, b·ªè qua:", content)
            return

        print(f"list other players resettttttt: {self.list_other_players}")
        # X√≥a t·∫•t c·∫£ OtherPlayer c≈©
        for player in self.list_other_players.values():
            if hasattr(player, 'character'):
                destroy(player.character.stand_entity)
                destroy(player.character.running_entity)
        self.list_other_players.clear()

        # **Reset nh√¢n v·∫≠t ch√≠nh**
        if str(self.player_info['id']) in content:
            player_pos = content[str(self.player_info['id'])]['position']
            self.player.position = player_pos  # C·∫≠p nh·∫≠t v·ªã tr√≠ m·ªõi
            self.player.healthbar.value = 100  # Reset m√°u
            print(
                f"ƒê√£ reset Player {self.player_info['id']} t·∫°i v·ªã tr√≠: {self.player.position}")

    def updateUsername(self, name):
        self.player_info['username'] = name
        self.chatMessage.inputText.y = -.43

    def sendSignalShooting(self, position, direction):
        self.client.send_message('clientShooting', {
            'position': position,
            'direction': direction
        })

    def printPosOfOtherPlayer(self):
        print('---------function: printPosOfOtherPlayer - client.py-------------')
        count = 0  # üîπ ƒê·∫∑t gi√° tr·ªã ban ƒë·∫ßu cho count

        for player_id, player in self.list_other_players.items():  # üîπ Duy·ªát dict ƒë√∫ng c√°ch
            if player_id != self.player_info['id']:
                print(f'üü¢ V·ªã tr√≠ c·ªßa ng∆∞·ªùi ch∆°i {player_id}: {player.pos}')
            count += 1

    def check_player_shot(self, bullet_pos):
        count = 0
        for player_id, player in self.list_other_players.items():  # üîπ Duy·ªát qua dict ƒë√∫ng c√°ch
            if player.pos == bullet_pos:  # ‚úÖ L√∫c n√†y player l√† OtherPlayer
                # player.healthbar.value -= 20
                # G·ª≠i th√¥ng tin cho server
                hit_data = {'id': player_id}
                self.client.send_message('player_shot', hit_data)
                # print(f"üî• Ng∆∞·ªùi ch∆°i {player_id} b·ªã tr√∫ng ƒë·∫°n! M√°u c√≤n l·∫°i: {player.healthbar.value}")

                if player.healthbar.value <= 0:
                    self.client.send_message('checkPlayerSurvival', 'reset')
                    player.logout()
            count += 1

    def getListOtherPlayers(self):
        return list(filter(lambda x: self.list_other_players.index(x) != self.player_info['id'], self.list_other_players))

    def getIdPlayers(self):
        return self.player_info['id']

    def input(self, key):

        if key == Keys.enter:
            if self.chatMessage.inputText.position == Vec3(0, -1, 0):
                self.chatMessage.inputText.position = Vec3(0, -0.43, 0)
                self.player.disable()
                self.chatMessage.inputText.active = True

            if self.chatMessage.inputText.text != '' and self.chatMessage.inputText.position == Vec3(0, -0.43, 0):
                self.client.send_message('messageFromClient',
                                         {
                                             'username': self.player_info['username'],
                                             'message': self.chatMessage.inputText.text
                                         }
                                         )
                self.chatMessage.inputText.position = Vec3(0, -1, 0)
                self.chatMessage.inputText.active = False
                self.player.enable()
        if held_keys['a'] or held_keys['s'] or held_keys['d'] or held_keys['w']:
            self.client.send_message(
                'updatePosition', self.player.model.world_position)
            self.client.send_message(
                'updateRotation', self.player.model.world_rotation)
            self.client.send_message('updateStatus', 'running')
        if not held_keys['a'] and not held_keys['s'] and not held_keys['d'] and not held_keys['w']:
            self.client.send_message('updateStatus', 'stand')
        if key == 'v' and self.allowRestartGame:
            print("Client: G·ª≠i y√™u c·∫ßu resetGameRequest ƒë·∫øn server")
            self.allowRestartGame = False  # NgƒÉn spam y√™u c·∫ßu

            if self.player_info['id'] == 0:  # Ch·ªâ Player 0 g·ª≠i y√™u c·∫ßu reset
                self.client.send_message('resetGameRequest', {})

            self.client.send_message(
                'registerPlayer', {})  # Y√™u c·∫ßu c·∫•p ID m·ªõi

            if self.endGameMessage:
                destroy(self.endGameMessage)
                self.endGameMessage = None

            self.player.ndk_revival()
